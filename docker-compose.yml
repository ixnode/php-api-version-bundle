# ===========================================
# A recipe to deliver the app via Nginx, PHP 8.1.x and MySQL 8.0.31.
#
# @author Björn Hempel <bjoern@hempel.li>
# @version 0.1.0 (2023-01-01)
# @since 0.1.0 (2023-01-01) First version.
# ===========================================

# ===========================================
# Start app:
# ----------
# ❯ docker-compose up -d
#
# Show containers:
# ----------------
# ❯ docker container ls
#
# Build images:
# -------------
# ❯ docker-compose build
#
# Show logs:
# ----------------
# ❯ docker-compose logs -f
#
# Login into containers:
# ----------------------
# ❯ docker-compose exec nginx bash
# ❯ docker-compose exec php bash
#
# Open app (local - localhost):
# -----------------
#
# With Traefik proxy:
# - https://www.api-version.localhost/
# - https://www.api-version.localhost/api/v1/docs.html
#
# Without Traefik proxy:
# - https://localhost:44443/
# - https://localhost:44443/api/v1/docs.html
#
# Restart containers:
# -------------------
# ❯ docker-compose restart
#
# Shutdown containers:
# --------------------
# ❯ docker-compose down
#
# Installation:
# -------------
# ❯ docker-compose up -d
# ❯ docker-compose exec php composer install
#
# ===========================================

version: "3.8"

# Configures the services
services:

  # Nginx to serve the app.
  nginx:
    # @see: https://hub.docker.com/_/nginx
    build:
      dockerfile: "${DOCKERFILE_NGINX}"
      context: "docker/nginx"
      args:
        - IMAGE_ADD=${IMAGE_ADD}
    image: "${IMAGE_NGINX}:${VERSION_APP_LATEST}"
    container_name: "${NAMESPACE_DEVELOPMENT}.nginx"
    hostname: "${NAMESPACE_HOSTNAME_DEVELOPMENT}-nginx"
    restart: always
    volumes:
      # Server static pages
      - .:/var/www/web:cached
      # Add nginx log path
      - ./docker/nginx/log/:/var/log/nginx/
      # Add nginx configuration
      - ./docker/nginx/conf.d/site.conf:/etc/nginx/conf.d/default.conf
    networks:
      - network-internal
    depends_on:
      - php
      - database
      - database-test

  # PHP FPM 8.1.11 to serve dynamic php scripts
  php:
    # @see: https://hub.docker.com/_/php
    build:
      dockerfile: "${DOCKERFILE_PHP_FPM}"
      context: "docker/php"
      args:
        - IMAGE_ADD=${IMAGE_ADD}
    image: "${IMAGE_PHP}:${VERSION_APP_LATEST}"
    container_name: "${NAMESPACE_DEVELOPMENT}.php.${PHP_VERSION}"
    hostname: "${NAMESPACE_HOSTNAME_DEVELOPMENT}-php-${PHP_VERSION_HOSTNAME}"
    restart: always
    #command: "cron -f"
    volumes:
      # Server static pages
      - .:/var/www/web:delegated
      # Exclude folder vendor
      - php-data-vendor:/var/www/web/vendor
      # Exclude folder var/cache
      - php-data-var:/var/www/web/var
    #user: "${UID}:${GID}"
    networks:
      - network-internal
    environment:
      # app version
      VERSION_APP: "${VERSION_APP}"
      # database configuration
      ENV_DB_HOST: "${NAMESPACE_HOSTNAME_DEVELOPMENT}-database"
      ENV_DB_USER: "${MYSQL_SERVER_ROOT_USER}"
      ENV_DB_PASS: "${MYSQL_SERVER_ROOT_PASSWORD}"
      ENV_DB_NAME: "${MYSQL_SERVER_DB}"
      ENV_DB_PORT: "${MYSQL_SERVER_PORT}"
      ENV_DB_VERSION: "${MYSQL_SERVER_VERSION}"
      ENV_DB_DRIVER: "${MYSQL_SERVER_DRIVER}"
      # database test configuration
      ENV_DB_HOST_TEST: "${NAMESPACE_HOSTNAME_DEVELOPMENT}-database-test"
      ENV_DB_USER_TEST: "${MYSQL_SERVER_ROOT_USER}"
      ENV_DB_PASS_TEST: "${MYSQL_SERVER_ROOT_PASSWORD}"
      ENV_DB_NAME_TEST: "${MYSQL_SERVER_DB_TEST}"
      ENV_DB_PORT_TEST: "${MYSQL_SERVER_PORT}"
      ENV_DB_VERSION_TEST: "${MYSQL_SERVER_VERSION}"
      ENV_DB_DRIVER_TEST: "${MYSQL_SERVER_DRIVER}"
      # mail configuration
      ENV_MAIL_SERVER_TRANSPORT: "${MAIL_SERVER_TRANSPORT}"
      ENV_MAIL_SERVER_HOST: "${MAIL_SERVER_HOST}"
      ENV_MAIL_SERVER_PORT: "${MAIL_SERVER_PORT}"
      # some ports
      ENV_EXPOSE_API_HTTPS_PORT: "${PORT_HTTPS_API_EXPOSE}"
    depends_on:
      - database
      - database-test

  # MySQL 8.0.31 Server
  database:
    image: "${IMAGE_MYSQL}"
    container_name: "${NAMESPACE_DEVELOPMENT}.database"
    hostname: "${NAMESPACE_HOSTNAME_DEVELOPMENT}-database"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_SERVER_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_SERVER_DB}"
    volumes:
      # Add database data volume
      - database-data:/var/lib/mysql:delegated
      # Add database config file
      - ./docker/mysql/conf.d/mysqld.cnf:/etc/mysql/conf.d/mysqld.cnf
    networks:
      - network-internal

  # MySQL 8.0.31 Server
  database-test:
    image: "${IMAGE_MYSQL}"
    container_name: "${NAMESPACE_DEVELOPMENT}.database.test"
    hostname: "${NAMESPACE_HOSTNAME_DEVELOPMENT}-database-test"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_SERVER_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_SERVER_DB_TEST}"
    volumes:
      # Add database config file
      - ./docker/mysql/conf.d/mysqld.cnf:/etc/mysql/conf.d/mysqld.cnf
    networks:
      - network-internal

  # Adminer MySQL Client
  adminer:
    image: "${IMAGE_ADMINER}"
    container_name: "${NAMESPACE_DEVELOPMENT}.adminer"
    hostname: "${NAMESPACE_HOSTNAME_DEVELOPMENT}-adminer"
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: "${NAMESPACE_HOSTNAME_DEVELOPMENT}-database"
    networks:
      - network-internal
    depends_on:
      - database
      - database-test

  # Mailhog (amd64 and arm64 version)
  mailhog:
    image: "teawithfruit/mailhog:latest"
    container_name: "${NAMESPACE_DEVELOPMENT}.mailhog"
    hostname: "${NAMESPACE_HOSTNAME_DEVELOPMENT}-mailhog"
    restart: always
    networks:
      - network-internal
    depends_on:
      - php

# configure volumes
volumes:
  database-data:
    name: "${NAMESPACE_DEVELOPMENT}.database.data"
  php-data-vendor:
    name: "${NAMESPACE_DEVELOPMENT}.php.data.vendor"
  php-data-var:
    name: "${NAMESPACE_DEVELOPMENT}.php.data.var"

# configure networks
networks:
  network-internal:
    external: false
    name: "${NAMESPACE_HOSTNAME}.network.internal"
